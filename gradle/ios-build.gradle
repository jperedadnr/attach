if (System.getProperty('os.name').toLowerCase().contains("mac")) {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            args '-version', '-sdk', 'iphoneos', 'SDKVersion'
            executable 'xcodebuild'
            standardOutput = os
        }
        ext.IOS_VERSION = os.toString().trim()
    }
} else {
    ext.IOS_VERSION = ""
}
//ext.IOS_VERSION = System.getProperty("IOS_VERSION", "9.3")
ext.IS_DEBUG_NATIVE = Boolean.parseBoolean(System.getProperty("IS_DEBUG_NATIVE", "false"))

def sdkPath(String platform) {
    return "/Applications/Xcode.app/Contents/Developer/Platforms/${platform}.platform/Developer/SDKs/${platform}${IOS_VERSION}.sdk";
}

ext.xcodebuildIOS = {buildDir, projectDir, name ->

    if (!file(sdkPath('iPhoneOS')).exists()) {
        println "Skipping xcodebuild"
        return
    }
    
    // define statics do being able to configure the input/output files on the task
    // for faster builds if nothing changed
    def buildSystems = ["iPhoneOS+arm64",
                        "iPhoneOS+armv7",
                        "iPhoneSimulator+i386",
                        "iPhoneSimulator+x86_64"]
    def linkerOutputs = []

    def lipoOutput = "$buildDir/native/lib${name}.a"

    def nativeSources = ["$projectDir/ios/native/${name}.m"]

    // the actual task action
    buildSystems.each { buildSystem ->

        def (platform, arch) = buildSystem.tokenize("+");

        def compileOutput = "$buildDir/native/$arch"
        def compileOutputs = ["$buildDir/native/$arch/${name}.o"]

        def linkerOutput = "$buildDir/native/$arch/lib${name}.a"

        new File(compileOutput).mkdirs();

        def clangArgs = [
                "-x", "objective-c",
                "-miphoneos-version-min=6.0",
                "-fmessage-length=0",
                "-std=c99",
                "-fno-common",
                "-Wall",
                "-fno-strict-aliasing",
                "-fwrapv",
                "-fpascal-strings",
                "-fobjc-abi-version=2",
                "-fobjc-legacy-dispatch",
                "-I" + System.getenv("JAVA_HOME") + "/include",
                "-I" + System.getenv("JAVA_HOME") + "/include/darwin",
                "-c",
                IS_DEBUG_NATIVE ? ["-O0", "-DDEBUG", "-g"] : ["-O3", "-DNDEBUG"],
                "-arch", arch,
                "-isysroot",
                sdkPath(platform),
                nativeSources].flatten()
        // "-o", compileOutput,

        def linkerArgs = [
                "-static",
                "-framework", "Foundation",
                "-framework", "CoreGraphics",
                "-framework", "CoreBluetooth",
                "-framework", "CoreLocation",
                "-framework", "CoreMotion",
                "-framework", "CoreText",
                "-framework", "UIKit",
                "-framework", "QuartzCore",
                "-framework", "OpenGLES",
                "-framework", "StoreKit",
                "-framework", "UserNotifications",
                "-arch_only", arch,
                "-syslibroot", sdkPath(platform),
                "-L${sdkPath(platform)}/usr/lib",
                "-o", linkerOutput,
                compileOutputs
        ].flatten()

        // execute compiler
        exec {
            executable "clang"
            args clangArgs
            workingDir compileOutput

            // println commandLine
        }

        // execute linker
        exec {
            executable "libtool"
            args linkerArgs
            workingDir compileOutput

            // println commandLine
        }

        linkerOutputs.add(linkerOutput)
    }

    def lipoArgs = [
            "-create",
            linkerOutputs,
            "-o",
            lipoOutput
    ].flatten();

    // execute lipo to combine all linker output in one archive
    exec {
        executable "lipo"
        args lipoArgs

        // println commandLine
    }
}
